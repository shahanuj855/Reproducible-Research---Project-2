StormData <- read.csv("StormData")
head(StormData)
library(dplyr)
library(ggplot2)
library(knitr)
StormData_df <- tbl_df(StormData) #transform to df for dplyr ops
by_EV <- group_by(StormData_df, EVTYPE)    #group all same EV rows
by_EV_mod <- mutate(by_EV, total_aff = FATALITIES + INJURIES) #add a variable for total health_loss
health_sum <- select(by_EV_mod,EVTYPE, FATALITIES, INJURIES, total_aff) #Pull out the columns we need,
Grp_EV <- summarize(health_sum, health_loss = sum(total_aff)) #gives just total healthloss for each EVTYPE
Top_Ten1 <- arrange(Grp_EV, desc(health_loss))
Top_Ten1 <- head(Top_Ten1, 10)
quantile(Grp_EV$health_loss, probs = 0.99) #Finds top 1% amount for total health loss
Top_Ten <- filter(Grp_EV, health_loss > 1400) #Yields top 1% events with most health losses
Top_Ten <- arrange(Top_Ten, desc(health_loss)) #Sort in desc order
ggplot(Top_Ten, aes(x=EVTYPE, y=health_loss)) + geom_bar(stat="identity")
EC_ST <- select(StormData_df,EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
View(EC_ST)
View(EC_ST)
EC_ST <- group_by(EC_ST, EVTYPE)
EC_ST
EC_STtest <- select(StormData_df, EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
x<-vector(mode = "numeric", length = 0)
for(row in 1:nrow(EC_STtest)){
x[i]<- x+1
}
for(i in 1:nrow(EC_STtest)){
x[i]<- x+1
}
for(i in 1:nrow(EC_STtest)){
x[i]<- x[i]+1
}
x
x<-vector(mode = "numeric", length = 0)
x<- 0
x<-vector(mode = "numeric", length = 0)
x[1]<- 0
for(i in 1:nrow(EC_STtest)){
x[i]<- x[i]+1
}
x[1]<- 0
x[1]<- 0
for(i in 1:nrow(EC_STtest)){
x[i+1 ]<- x[i]+1
}
for(i in 1:nrow(EC_STtest)){
x[i+1 ]<- x[i]+1
}
x[1]<- 0
for(i in 1:nrow(EC_STtest)){
x[i+1 ]<- x[i]+1
}
x<-vector(mode = "numeric", length = 0)
x[1]<- 0
for(i in 1:nrow(EC_STtest)){
x[i+1 ]<- x[i]+1
}
x
x[1]<- 1
for(i in 1:nrow(EC_STtest)){
if(EC_STtest$PROPDMGEXP[i] == ""){
EC_STtest$PROPDMGEXP[i] <- 0
}else if(EC_ST$PROPDMGEXP[i] == "+"){
EC_STtest$PROPDMGEXP[i] <- 1
}else if(EC_STtest$PROPDMGEXP == "h"){
EC_STtest$PROPDMGEXP[i] <- 2
}else if(EC_STtest$PROPDMGEXP == "k"){
EC_STtest$PROPDMGEXP[i] <- 3
}else if(EC_STtest$PROPDMGEXP == "m"){
EC_STtest$PROPDMGEXP[i] <- 6
}else if(EC_STtest$PROPDMGEXP == "b"){
EC_STtest$PROPDMGEXP[i] <- 9
}
i = i + 1
}
View(EC_STtest)
EC_ST <- select(StormData_df,EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
EC_ST <- group_by(EC_ST, EVTYPE)
EC_STtest <- select(StormData_df, EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
EC_STtest <- select(StormData_df, EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
View(EC_STtest)
str(EC_STtest$PROPDMGEXP)
hi <- str(EC_STtest$PROPDMGEXP)
as.numeric(9)
is.numeric(9)
i <- 1
for(i in 1:nrow(EC_STtest)){
if(EC_STtest$PROPDMGEXP[i] == ""){
EC_STtest$PROPDMGEXP[i] <- 0
}else if(EC_ST$PROPDMGEXP[i] == "+" | EC_STtest$PROPDMGEXP[i] == "?" | EC_STtest$PROPDMGEXP[i] == "-"){
EC_STtest$PROPDMGEXP[i] <- 1
}else if(EC_STtest$PROPDMGEXP == "h"){
EC_STtest$PROPDMGEXP[i] <- 2
}else if(EC_STtest$PROPDMGEXP == "k"){
EC_STtest$PROPDMGEXP[i] <- 3
}else if(EC_STtest$PROPDMGEXP == "m"){
EC_STtest$PROPDMGEXP[i] <- 6
}else if(EC_STtest$PROPDMGEXP == "b"){
EC_STtest$PROPDMGEXP[i] <- 9
}else if(is.numeric(EC_STtest$PROPDMGEXP)==TRUE){
EC_STtest$PROPDMGEXP[i] <- EC_STtest$PROPDMGEXP
}
i = i + 1
}
View(EC_STtest)
EC_STtest <- select(StormData_df, EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
View(EC_STtest)
EC_ST <- select(StormData_df,EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
EC_ST
EC_ST$PROPDMGEXP <- as.character(EC_ST$PROPDMGEXP)
EC_ST$CROPDMGEXP <- as.character(EC_ST$PROPDMGEXP)
View(EC_STtest)
col.classes(EC_ST)
class(EC_ST$PROPDMGEXP)
class(EC_ST$CROPDMGEXP)
EC_ST
EC_STtest <- select(StormData_df, EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
EC_STtest
EC_STtest$PROPDMGEXP <- as.character(EC_STtest$PROPDMGEXP)
EC_STtest$CROPDMGEXP <- as.character(EC_STtest$CROPDMGEXP)
class(EC_Sttest$PROPDMGEXP)
class(EC_STtest$PROPDMGEXP)
i <- 1
View(EC_STtest)
is.numeric(EC_STtest$PROPDMGEXP[436050])
EC_STtest$PROPDMGEXP[436050]
EC_STtest$PROPDMGEXP[1]
View(EC_STtest)
EC_STtest$PROPDMGEXP[1] <- 3
i<-1
for (i in i:10){
print("hi")
}
for (i in i:10){
print("hi")
i <- i + 1
}
x<-vector(mode = "numeric", length = 0)
x<-vector(mode = "character", length = 0)
for (i in i:10){
print("hi")
x[i] <- "hi"
}
i <- 1
for (i in i:10){
x[i] <- "hi"
}
x
i<-1
for (i in i:10){
x[i] <- "hi"
}
i<-0
for (i in i:10){
x[i] <- "hi"
}
i<-0
for (i in i:10){
x[i] <- "hi"
}
x<-vector(mode = "character", length = 0)
i<-0
for (i in i:10){
x[i] <- "hi"
}
i <- 0
x<-vector(mode = "character", length = 0)
for(i in 1:nrow(EC_STtest)){
if(EC_STtest$PROPDMGEXP[i] == ""){
EC_STtest$PROPDMGEXP[i] <- 0
}else if(EC_ST$PROPDMGEXP[i] == "+" | EC_STtest$PROPDMGEXP[i] == "?" | EC_STtest$PROPDMGEXP[i] == "-"){
EC_STtest$PROPDMGEXP[i] <- 1
}else if(EC_STtest$PROPDMGEXP == "h"| EC_STtest$PROPDMGEXP == "H"){
EC_STtest$PROPDMGEXP[i] <- 2
}else if(EC_STtest$PROPDMGEXP == "k"| EC_STtest$PROPDMGEXP == "K"){
EC_STtest$PROPDMGEXP[i] <- 3
}else if(EC_STtest$PROPDMGEXP == "m" | EC_STtest$PROPDMGEXP == "M"){
EC_STtest$PROPDMGEXP[i] <- 6
}else if(EC_STtest$PROPDMGEXP == "b" | EC_STtest$PROPDMGEXP == "B"){
EC_STtest$PROPDMGEXP[i] <- 9
}else{
EC_STtest$PROPDMGEXP[i] <- EC_STtest$PROPDMGEXP[i]
}
x[i] <- "hi"
}
EC_STtest <- select(StormData_df, EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
EC_STtest$PROPDMGEXP <- as.character(EC_STtest$PROPDMGEXP)
EC_STtest$CROPDMGEXP <- as.character(EC_STtest$CROPDMGEXP)
View(EC_STtest)
i <- 0
x<-vector(mode = "character", length = 0)
for(i in 1:nrow(EC_STtest)){
if(EC_STtest$PROPDMGEXP[i] == ""){
EC_STtest$PROPDMGEXP[i] <- 0
}else if(EC_ST$PROPDMGEXP[i] == "+" | EC_STtest$PROPDMGEXP[i] == "?" | EC_STtest$PROPDMGEXP[i] == "-"){
EC_STtest$PROPDMGEXP[i] <- 1
}else if(EC_STtest$PROPDMGEXP == "h"| EC_STtest$PROPDMGEXP == "H"){
EC_STtest$PROPDMGEXP[i] <- 2
}else if(EC_STtest$PROPDMGEXP == "k"| EC_STtest$PROPDMGEXP == "K"){
EC_STtest$PROPDMGEXP[i] <- 3
}else if(EC_STtest$PROPDMGEXP == "m" | EC_STtest$PROPDMGEXP == "M"){
EC_STtest$PROPDMGEXP[i] <- 6
}else if(EC_STtest$PROPDMGEXP == "b" | EC_STtest$PROPDMGEXP == "B"){
EC_STtest$PROPDMGEXP[i] <- 9
}else{
EC_STtest$PROPDMGEXP[i] <- EC_STtest$PROPDMGEXP[i]
}
x[i] <- "hi"
}
View(EC_STtest)
EC_STtest$PROPDMGEXP <- as.character(EC_STtest$PROPDMGEXP)
EC_STtest$CROPDMGEXP <- as.character(EC_STtest$CROPDMGEXP)
EC_STtest <- select(StormData_df, EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
EC_STtest$PROPDMGEXP <- as.character(EC_STtest$PROPDMGEXP)
EC_STtest$CROPDMGEXP <- as.character(EC_STtest$CROPDMGEXP)
class(EC_STtest$PROPDMGEXP)
EC_STtest$PROPDMGEXP[(EC_STtest$PROPDMGEXP == "")] <- 0
EC_STtest$PROPDMGEXP[(EC_STtest$PROPDMGEXP == "+") | (EC_STtest$PROPDMGEXP == "-") | (EC_STtest$PROPDMGEXP == "?")] <- 1
EC_STtest$PROPDMGEXP[(EC_STtest$PROPDMGEXP == "h") | (EC_STtest$PROPDMGEXP == "H")] <- 2
EC_STtest$PROPDMGEXP[(EC_STtest$PROPDMGEXP == "k") | (EC_STtest$PROPDMGEXP == "K")] <- 3
EC_STtest$PROPDMGEXP[(EC_STtest$PROPDMGEXP == "m") | (EC_STtest$PROPDMGEXP == "M")] <- 6
EC_STtest$PROPDMGEXP[(EC_STtest$PROPDMGEXP == "b") | (EC_STtest$PROPDMGEXP == "B")] <- 9
EC_STtest$CROPDMGEXP[(EC_STtest$CROPDMGEXP == "")] <- 0
EC_STtest$CROPDMGEXP[(EC_STtest$CROPDMGEXP == "+") | (EC_STtest$CROPDMGEXP == "-") | (EC_STtest$CROPDMGEXP == "?")] <- 1
EC_STtest$CROPDMGEXP[(EC_STtest$CROPDMGEXP == "h") | (EC_STtest$CROPDMGEXP == "H")] <- 2
EC_STtest$CROPDMGEXP[(EC_STtest$CROPDMGEXP == "k") | (EC_STtest$CROPDMGEXP == "K")] <- 3
EC_STtest$CROPDMGEXP[(EC_STtest$CROPDMGEXP == "m") | (EC_STtest$CROPDMGEXP ==  "M")] <- 6
EC_STtest$CROPDMGEXP[(EC_STtest$PROPDMGEXP == "b") | (EC_STtest$CROPDMGEXP == "B")] <- 9
EC_STtest$PROPDMGEXP <- as.integer(EC_STtest$PROPDMGEXP)
EC_STtest$CROPDMGEXP <- as.integer(EC_STtest$CROPDMGEXP)
EC_STtest$PROPDMG <- EC_STtest$PROPDMG * 10^EC_STtest$PROPDMGEXP
EC_STtest$CROPDMG <- EC_STtest$CROPDMG * 10^EC_STtest$CROPDMGEXP
EC_STtest <- group_by(EC_STtest, EVTYPE)
EC_STtest
By_EC_STtest <- mutate(ECSTtest, SUM = PROPDMG + CROPDMG)
EC_STtest_sum <- mutate(EC_STtest, SUM = PROPDMG + CROPDMG)
View(EC_STtest_sum)
EC_STtest_sum
EC_STtest_sum <- summarize(EC_STtest_sum, PropLoss = sum(SUM))
EC_STtest_sum
View(EC_STtest)
Top_TenPL <- head(desc(EC_STtest_sum),10)
Top_TenPL <- head(EC_STtest_sum,10)
View(Top_TenPL)
EC_STtest_sum <- arrange(desc(PropLoss))
Top_TenPL <- head(EC_STtest_sum,10)
EC_STtest_sum <- arrange(EC_ST_sum, desc(PropLoss))
EC_STtest_sum <- arrange(EC_STtest_sum, desc(PropLoss))
Top_TenPL <- head(EC_STtest_sum,10)
View(Top_TenPL)
View(EC_ST)
i <- 1
if(EC_ST$PROPDMGEXP[i] == ""){
EC_ST$PROPDMGEXP[i] <- 0
}else if(EC_ST$PROPDMGEXP[i] == "+" | EC_ST$PROPDMGEXP[i] == "?" | EC_STtest$PROPDMGEXP[i] == "-"){
EC_STtest$PROPDMGEXP[i] <- 1
}else if(EC_ST$PROPDMGEXP == "h"| EC_ST$PROPDMGEXP == "H"){
EC_ST$PROPDMGEXP[i] <- 2
}else if(EC_ST$PROPDMGEXP == "k"| EC_ST$PROPDMGEXP == "K"){
EC_ST$PROPDMGEXP[i] <- 3
}else if(EC_STtest$PROPDMGEXP == "m" | EC_ST$PROPDMGEXP == "M"){
EC_ST$PROPDMGEXP[i] <- 6
}else if(EC_ST$PROPDMGEXP == "b" | EC_ST$PROPDMGEXP == "B"){
EC_ST$PROPDMGEXP[i] <- 9
}else{
EC_ST$PROPDMGEXP[i] <- EC_ST$PROPDMGEXP[i]
is.numeric(EC_STtest$PROPDMGEXP[436050])
i<-0
for (i in i:10){
}
if(EC_ST$PROPDMGEXP[i] == ""){
EC_ST$PROPDMGEXP[i] <- 0
}else if(EC_ST$PROPDMGEXP[i] == "+" | EC_ST$PROPDMGEXP[i] == "?" | EC_STtest$PROPDMGEXP[i] == "-"){
EC_STtest$PROPDMGEXP[i] <- 1
}else if(EC_ST$PROPDMGEXP == "h"| EC_ST$PROPDMGEXP == "H"){
EC_ST$PROPDMGEXP[i] <- 2
}else if(EC_ST$PROPDMGEXP == "k"| EC_ST$PROPDMGEXP == "K"){
EC_ST$PROPDMGEXP[i] <- 3
}else if(EC_STtest$PROPDMGEXP == "m" | EC_ST$PROPDMGEXP == "M"){
EC_ST$PROPDMGEXP[i] <- 6
}else if(EC_ST$PROPDMGEXP == "b" | EC_ST$PROPDMGEXP == "B"){
EC_ST$PROPDMGEXP[i] <- 9
}else{
EC_ST$PROPDMGEXP[i] <- EC_ST$PROPDMGEXP[i]
}
ggplot(Top_TenPL, aes(x=EVTYPE, y=PropLoss)) + geom_bar(stat="identity")
ggplot(Top_TenPL, aes(x=EVTYPE, y=PropLoss)) + geom_bar(stat="identity")
ggplot(Top_TenPL, aes(x=EVTYPE, y=PropLoss)) + geom_bar(stat="identity")
ggplot(Top_Ten, aes(x=EVTYPE, y=health_loss)) + geom_bar(stat="identity")
ggplot(Top_TenPL, aes(x=EVTYPE, y=PropLoss)) + geom_bar(stat="identity")
StormData <- read.csv("StormData")
head(StormData)
library(dplyr)
library(ggplot2)
library(knitr)
StormData_df <- tbl_df(StormData) #transform to df for dplyr ops
SDby_EV <- group_by(StormData_df, EVTYPE)    #group all same EV rows
SDby_EV_sum <- mutate(by_EV, total_aff = FATALITIES + INJURIES) #add a variable for total health_loss
SDby_EV_sum <- mutate(SDby_EV, total_aff = FATALITIES + INJURIES) #add a variable for total health_loss
SDby_EV_mod <- select(SDby_EV_sum,EVTYPE, FATALITIES, INJURIES, total_aff) #Pull out the columns we need,
SDby_EV_sorted <- summarize(SDby_EV_mod, health_loss = sum(total_aff)) #gives just total healthloss for each EVTYPE
View(SDby_EV_sorted)
Top_Ten1 <- arrange(Grp_EV, desc(health_loss))
health_loss
SDby_EV_sorted <- summarize(SDby_EV_mod, health_loss = sum(total_aff)) #gives just total healthloss for each EVTYPE
Top_Ten1 <- arrange(SDby_EV_sorted, desc(health_loss))
Top_Ten1 <- head(Top_Ten1, 10)
View(Top_Ten1)
quantile(SDby_EV_sorted$health_loss, probs = 0.99) #Finds top 1% amount for total health loss
Top_Ten <- filter(SDby_EV_sorted, health_loss > 1400) #Yields top 1% events with most health losses
Top_Ten1 <- filter(SDby_EV_sorted, health_loss > 1400) #Yields top 1% events with most health losses
Top_Ten1 <- arrange(Top_Ten, desc(health_loss)) #Sort in desc order
ggplot(Top_Ten, aes(x=EVTYPE, y=health_loss)) + geom_bar(stat="identity")
Top_Ten1 <- filter(SDby_EV_sorted, health_loss > 1400) #Yields top 1% events with most health losses, in this case greater than 1400
Top_Ten1 <- arrange(Top_Ten, desc(health_loss)) #Sort in desc order
ggplot(Top_Ten, aes(x=EVTYPE, y=health_loss)) + geom_bar(stat="identity")
SD_ECL <- select(StormData_df, EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
SD_ECL$PROPDMGEXP <- as.character(SD_ECL$PROPDMGEXP)
SD_ECL$CROPDMGEXP <- as.character(SD_ECL$CROPDMGEXP)
class(SD_ECL$PROPDMGEXP)
SD_ECL$PROPDMGEXP[(SD_ECL$PROPDMGEXP == "")] <- 0
SD_ECL$PROPDMGEXP[(SD_ECL$PROPDMGEXP == "+") | (SD_ECL$PROPDMGEXP == "-") | (SD_ECL$PROPDMGEXP == "?")] <- 1
SD_ECL$PROPDMGEXP[(SD_ECL$PROPDMGEXP == "h") | (SD_ECL$PROPDMGEXP == "H")] <- 2
SD_ECL$PROPDMGEXP[(SD_ECL$PROPDMGEXP == "k") | (SD_ECL$PROPDMGEXP == "K")] <- 3
SD_ECL$PROPDMGEXP[(SD_ECL$PROPDMGEXP == "m") | (SD_ECL$PROPDMGEXP == "M")] <- 6
SD_ECL$PROPDMGEXP[(SD_ECL$PROPDMGEXP == "b") | (SD_ECL$PROPDMGEXP == "B")] <- 9
SD_ECL$CROPDMGEXP[(SD_ECL$CROPDMGEXP == "")] <- 0
SD_ECL$CROPDMGEXP[(SD_ECL$CROPDMGEXP == "+") | (SD_ECL$CROPDMGEXP == "-") | (SD_ECL$CROPDMGEXP == "?")] <- 1
SD_ECL$CROPDMGEXP[(SD_ECL$CROPDMGEXP == "h") | (SD_ECL$CROPDMGEXP == "H")] <- 2
SD_ECL$CROPDMGEXP[(SD_ECL$CROPDMGEXP == "k") | (SD_ECL$CROPDMGEXP == "K")] <- 3
SD_ECL$CROPDMGEXP[(SD_ECL$CROPDMGEXP == "m") | (SD_ECL$CROPDMGEXP ==  "M")] <- 6
SD_ECL$CROPDMGEXP[(SD_ECL$PROPDMGEXP == "b") | (SD_ECL$CROPDMGEXP == "B")] <- 9
SD_ECL$PROPDMGEXP <- as.integer(SD_ECL$PROPDMGEXP)
SD_ECL$CROPDMGEXP <- as.integer(SD_ECL$CROPDMGEXP)
SD_ECL$PROPDMG <- SD_ECL$PROPDMG * 10^SD_ECL$PROPDMGEXP
SD_ECL$CROPDMG <- SD_ECL$CROPDMG * 10^SD_ECL$CROPDMGEXP
SD_ECL <- group_by(SD_ECL, EVTYPE)
SD_ECL_sum <- mutate(SD_ECL, SUM = PROPDMG + CROPDMG)
SD_ECL_sum <- summarize(SD_ECL_sum, PropLoss = sum(SUM))
SD_ECL_sum <- arrange(SD_ECL_sum, desc(PropLoss))
Top_TenPL <- head(SD_ECL_sum,10)
ggplot(Top_TenPL, aes(x=EVTYPE, y=PropLoss)) + geom_bar(stat="identity")
library(dplyr)
library(ggplot2)
library(knitr)
StormData <- read.csv("StormData")
head(StormData)
#Across the United States, which types of events (as indicated in the EVTYPE variable) are most harmful with respect to population health?
SDby_EV <- group_by(StormData_df, EVTYPE)    #group all same EV rows
StormData_df <- tbl_df(StormData) #transform to df for dplyr ops
#Across the United States, which types of events (as indicated in the EVTYPE variable) are most harmful with respect to population health?
SDby_EV <- group_by(StormData_df, EVTYPE)    #group all same EV rows
SDby_EV_sum <- mutate(SDby_EV, total_aff = FATALITIES + INJURIES) #add a variable for total health_loss
SDby_EV_mod <- select(SDby_EV_sum,EVTYPE, FATALITIES, INJURIES, total_aff) #Pull out the columns we need,like EVTYPE, FATALITIES, INJURIES
SDby_EV_sorted <- summarize(SDby_EV_mod, health_loss = sum(total_aff)) #gives just total healthloss for each EVTYPE
##A method to get top 1% disastor events by health_loss, happens to yield top 10 disastors
quantile(SDby_EV_sorted$health_loss, probs = 0.99) #Finds top 1% amount for total health loss
Top_Ten1 <- filter(SDby_EV_sorted, health_loss > 1400) #Yields top 1% events with most health losses, in this case greater than 1400
Top_Ten1 <- arrange(Top_Ten, desc(health_loss)) #Sort in desc order
##A method to get top 1% disastor events by health_loss, happens to yield top 10 disastors
quantile(SDby_EV_sorted$health_loss, probs = 0.99) #Finds top 1% amount for total health loss
Top_Ten1 <- filter(SDby_EV_sorted, health_loss > 1400) #Yields top 1% events with most health losses, in this case greater than 1400
Top_Ten1 <- arrange(Top_Ten1, desc(health_loss)) #Sort in desc order
#Across the United States, which types of events have the greatest economic consequences?
SD_ECL <- select(StormData_df, EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)#Pull out necessary variables
SD_ECL$PROPDMGEXP <- as.character(SD_ECL$PROPDMGEXP)#change type to make it easier to subsitute data
SD_ECL$CROPDMGEXP <- as.character(SD_ECL$CROPDMGEXP)
#Subsitute necessary values into EXP columns for Properties and Crops
SD_ECL$PROPDMGEXP[(SD_ECL$PROPDMGEXP == "")] <- 0
SD_ECL$PROPDMGEXP[(SD_ECL$PROPDMGEXP == "+") | (SD_ECL$PROPDMGEXP == "-") | (SD_ECL$PROPDMGEXP == "?")] <- 1
SD_ECL$PROPDMGEXP[(SD_ECL$PROPDMGEXP == "h") | (SD_ECL$PROPDMGEXP == "H")] <- 2
SD_ECL$PROPDMGEXP[(SD_ECL$PROPDMGEXP == "k") | (SD_ECL$PROPDMGEXP == "K")] <- 3
SD_ECL$PROPDMGEXP[(SD_ECL$PROPDMGEXP == "m") | (SD_ECL$PROPDMGEXP == "M")] <- 6
SD_ECL$PROPDMGEXP[(SD_ECL$PROPDMGEXP == "b") | (SD_ECL$PROPDMGEXP == "B")] <- 9
SD_ECL$CROPDMGEXP[(SD_ECL$CROPDMGEXP == "")] <- 0
SD_ECL$CROPDMGEXP[(SD_ECL$CROPDMGEXP == "+") | (SD_ECL$CROPDMGEXP == "-") | (SD_ECL$CROPDMGEXP == "?")] <- 1
SD_ECL$CROPDMGEXP[(SD_ECL$CROPDMGEXP == "h") | (SD_ECL$CROPDMGEXP == "H")] <- 2
SD_ECL$CROPDMGEXP[(SD_ECL$CROPDMGEXP == "k") | (SD_ECL$CROPDMGEXP == "K")] <- 3
SD_ECL$CROPDMGEXP[(SD_ECL$CROPDMGEXP == "m") | (SD_ECL$CROPDMGEXP ==  "M")] <- 6
SD_ECL$CROPDMGEXP[(SD_ECL$PROPDMGEXP == "b") | (SD_ECL$CROPDMGEXP == "B")] <- 9
# Convert to integers for exponentiation
SD_ECL$PROPDMGEXP <- as.integer(SD_ECL$PROPDMGEXP)
SD_ECL$CROPDMGEXP <- as.integer(SD_ECL$CROPDMGEXP)
SD_ECL$PROPDMG <- SD_ECL$PROPDMG * 10^SD_ECL$PROPDMGEXP # Multiplying to get true magnitude
SD_ECL$CROPDMG <- SD_ECL$CROPDMG * 10^SD_ECL$CROPDMGEXP
SD_ECL <- group_by(SD_ECL, EVTYPE)
SD_ECL_sum <- mutate(SD_ECL, SUM = PROPDMG + CROPDMG)
SD_ECL_sum <- summarize(SD_ECL_sum, PropLoss = sum(SUM))
SD_ECL_sum <- arrange(SD_ECL_sum, desc(PropLoss))
Top_TenPL <- head(SD_ECL_sum,10)
ggplot(Top_Ten, aes(x=EVTYPE, y=health_loss)) + geom_bar(stat="identity")
ggplot(Top_Ten1, aes(x=EVTYPE, y=health_loss)) + geom_bar(stat="identity")
ggplot(Top_TenPL, aes(x=EVTYPE, y=PropLoss)) + geom_bar(stat="identity")
ggplot(Top_Ten1, aes(x=EVTYPE, y=health_loss)) + geom_bar(stat="identity")
ggplot(Top_TenPL, aes(x=EVTYPE, y=PropLoss)) + geom_bar(stat="identity")
