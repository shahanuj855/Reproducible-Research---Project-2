{
    "collab_server" : "",
    "contents" : "StormData <- read.csv(\"StormData\")\nhead(StormData)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(knitr)\n\nStormData_df <- tbl_df(StormData) #transform to df for dplyr ops\n\n\n#Across the United States, which types of events (as indicated in the EVTYPE variable) are most harmful with respect to population health?\nSDby_EV <- group_by(StormData_df, EVTYPE)    #group all same EV rows\nSDby_EV_sum <- mutate(SDby_EV, total_aff = FATALITIES + INJURIES) #add a variable for total health_loss\nSDby_EV_mod <- select(SDby_EV_sum,EVTYPE, FATALITIES, INJURIES, total_aff) #Pull out the columns we need,\n#like EVTYPE, FATALITIES, INJURIES\nSDby_EV_sorted <- summarize(SDby_EV_mod, health_loss = sum(total_aff)) #gives just total healthloss for each EVTYPE\n\n##A method to get top 1% disastor events by health_loss, happens to yield top 10 disastors\nquantile(SDby_EV_sorted$health_loss, probs = 0.99) #Finds top 1% amount for total health loss\nTop_Ten1 <- filter(SDby_EV_sorted, health_loss > 1400) #Yields top 1% events with most health losses, in this case greater than 1400\nTop_Ten1 <- arrange(Top_Ten, desc(health_loss)) #Sort in desc order\nggplot(Top_Ten, aes(x=EVTYPE, y=health_loss)) + geom_bar(stat=\"identity\")\n\n####The Largest cause of population health damage was by Tornado.\n\n\n#Across the United States, which types of events have the greatest economic consequences?\n\nSD_ECL <- select(StormData_df, EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)\nSD_ECL$PROPDMGEXP <- as.character(SD_ECL$PROPDMGEXP)\nSD_ECL$CROPDMGEXP <- as.character(SD_ECL$CROPDMGEXP)\nclass(SD_ECL$PROPDMGEXP)\n\n# Convert the units of \"PROPDMGEXP\" and \"CROPDMGEXP\" into numerical form\nSD_ECL$PROPDMGEXP[(SD_ECL$PROPDMGEXP == \"\")] <- 0\nSD_ECL$PROPDMGEXP[(SD_ECL$PROPDMGEXP == \"+\") | (SD_ECL$PROPDMGEXP == \"-\") | (SD_ECL$PROPDMGEXP == \"?\")] <- 1\nSD_ECL$PROPDMGEXP[(SD_ECL$PROPDMGEXP == \"h\") | (SD_ECL$PROPDMGEXP == \"H\")] <- 2\nSD_ECL$PROPDMGEXP[(SD_ECL$PROPDMGEXP == \"k\") | (SD_ECL$PROPDMGEXP == \"K\")] <- 3\nSD_ECL$PROPDMGEXP[(SD_ECL$PROPDMGEXP == \"m\") | (SD_ECL$PROPDMGEXP == \"M\")] <- 6\nSD_ECL$PROPDMGEXP[(SD_ECL$PROPDMGEXP == \"b\") | (SD_ECL$PROPDMGEXP == \"B\")] <- 9\n\nSD_ECL$CROPDMGEXP[(SD_ECL$CROPDMGEXP == \"\")] <- 0\nSD_ECL$CROPDMGEXP[(SD_ECL$CROPDMGEXP == \"+\") | (SD_ECL$CROPDMGEXP == \"-\") | (SD_ECL$CROPDMGEXP == \"?\")] <- 1\nSD_ECL$CROPDMGEXP[(SD_ECL$CROPDMGEXP == \"h\") | (SD_ECL$CROPDMGEXP == \"H\")] <- 2\nSD_ECL$CROPDMGEXP[(SD_ECL$CROPDMGEXP == \"k\") | (SD_ECL$CROPDMGEXP == \"K\")] <- 3\nSD_ECL$CROPDMGEXP[(SD_ECL$CROPDMGEXP == \"m\") | (SD_ECL$CROPDMGEXP ==  \"M\")] <- 6\nSD_ECL$CROPDMGEXP[(SD_ECL$PROPDMGEXP == \"b\") | (SD_ECL$CROPDMGEXP == \"B\")] <- 9\n\n# convert to \"PROPDMGEXP\" and \"CROPDMGEXP\" values as integer.\nSD_ECL$PROPDMGEXP <- as.integer(SD_ECL$PROPDMGEXP)\nSD_ECL$CROPDMGEXP <- as.integer(SD_ECL$CROPDMGEXP)\n\nSD_ECL$PROPDMG <- SD_ECL$PROPDMG * 10^SD_ECL$PROPDMGEXP\nSD_ECL$CROPDMG <- SD_ECL$CROPDMG * 10^SD_ECL$CROPDMGEXP\n\n\nSD_ECL <- group_by(SD_ECL, EVTYPE)\nSD_ECL_sum <- mutate(SD_ECL, SUM = PROPDMG + CROPDMG)\nSD_ECL_sum <- summarize(SD_ECL_sum, PropLoss = sum(SUM))\nSD_ECL_sum <- arrange(SD_ECL_sum, desc(PropLoss))\nTop_TenPL <- head(SD_ECL_sum,10)\n\nggplot(Top_TenPL, aes(x=EVTYPE, y=PropLoss)) + geom_bar(stat=\"identity\")\n\n####The largest Economic Losses are suffered froom Floods. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1541091932451.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1926376938",
    "id" : "BAF2A97F",
    "lastKnownWriteTime" : 1541123408,
    "last_content_update" : 1541123408,
    "path" : "C:/Users/heman/Google Drive/School Stuff/Coursera/Data Science Specialization/5. Reproducible Research/Week 4/Project 2/Project 2 Script.R",
    "project_path" : "Project 2 Script.R",
    "properties" : {
        "source_window_id" : "wgvt855kowjp4",
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}